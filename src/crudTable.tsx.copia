//todo: sigue dando error en el componente input: admin true/false
//todo: css select admin true/false
//todo: dialogos crud como componentes
//todo: feature filtro en el listado de tabla
//todo: diagram view (static)
//todo: al hacer onclick en tableHeader, deberia cambiar el valor de this.state.tableSelected
//todo: poner en cv desarrollo de software con metodologia de tarjetas (kanban?) y Cursos Deep Learning
//todo: validacion de propiedades de modelo al salvar
import * as React from 'react';
import './App.css';
import {Collection} from "./orm/collection";
import {User} from "./models/user";
import {Post} from "./models/post";
import {Comment} from "./models/comment";
import {sampleCode} from "./sample.code";
import ReactJson from 'react-json-view';
// import JSONViewer from 'react-json-viewer';
import CodeHighlight from 'code-highlight';
import "code-highlight/lib/style.css";
import "highlight.js/styles/atelier-forest-light.css";
import {saveToDisk} from "./orm/database";
import {query} from "./orm/query.builder";
import {Model} from "./orm/model";

import {Sidebar} from "primereact/components/sidebar/Sidebar";
import {Toolbar} from 'primereact/components/toolbar/Toolbar';
import {Button} from "primereact/components/button/Button";
import {DataTable} from 'primereact/components/datatable/DataTable';
import {Dialog} from 'primereact/components/dialog/Dialog';
import {Column} from 'primereact/components/column/Column';
import {InputText} from 'primereact/components/inputtext/InputText';
import {Dropdown} from 'primereact/components/dropdown/Dropdown';
import {ScrollPanel} from 'primereact/components/scrollpanel/ScrollPanel';
import {Panel} from 'primereact/components/panel/Panel';
import {getUrlParameter} from "./orm/yago.logger";
import {DialogUser} from "./DialogUser";
import {DialogPost} from "./DialogPost";
import 'primereact/resources/primereact.min.css';
import 'primereact/resources/themes/omega/theme.css';
import 'font-awesome/css/font-awesome.css';






export default class CrudTable extends React.Component {

  // SHOW_CHILDREN = true;

  state: {
    tableSelected: string,
    isTableSelected: boolean, //todo: habria que usar isTableSelected en vez de tableSelected
    users: Model[],
    selectedModel: any,
    displayDialog: boolean,
  };

  props: {
    users?: any,
  }

  constructor(props: any) {
    super(props);
    this.state = {
      tableSelected: 'USERS',
      selectedModel: undefined,
      displayDialog: false,
    }
    //todo: revisar
    this.updateState = this.updateState.bind(this);
  }


  // dialogUser: DialogUser;

  componentDidMount() {
    //todo: cargar aqui la base de datos desde un fichero mediante peticion xmlhttp
    // this.carservice.getCarsSmall().then(data => this.setState({cars: data}));
  }

  /*
    updateState(showChildren?: boolean) {
  debugger
      // const {children} = this.state;
      // const children = this.children;
      let children: boolean;
      if (showChildren) {
        children = showChildren;
      } else {
        children = this.state.children;
      }
      const usersList = users.getAll({children});
      const postsList = posts.getAll({children});
      if (this.state.tableSelected === 'USERS') {
        this.setState({jsonContent: usersList});
      }
      if (this.state.tableSelected === 'POSTS') {
        this.setState({jsonContent: postsList});
      }
      this.setState({users: usersList, posts: postsList});
    }
  */

  updateState() {
// debugger
    const {children} = this.props;
    //todo: cambiar nombre usersList
    const usersList = users.getAll({children});
    // this.setState({jsonContent: usersList});
    // this.setState({users: usersList, displayDialog: false});
    this.setState({users: usersList});
  }


  loadDbFromDisk(e: any) {
// debugger
//     const xhr = new XMLHttpRequest();
//     xhr.open('GET', 'test2.sqlite', true);
//     xhr.responseType = 'arraybuffer';
//     xhr.onload = function(e) {
// debugger
//       const response = this.response;
//       const uInt8Array = new Uint8Array(this.response);
//       let db2 = db;
//       db2 = new sql.Database(uInt8Array);
//       const results = db2.exec("select * from users");
//       console.log('results', results);
//     };
//     xhr.send();
  }

  saveDbToDisk(e: any) {
    saveToDisk('metaphasejs.sqlite');
  }

  add(model: Model) {
    this.setState({selectedModel: model, displayDialog: true});
  }

  onBtnSave() {
    const selectedModel = this.state.selectedModel;
    if (selectedModel) {
      let editedModel = {...selectedModel};
      try {
        Object.setPrototypeOf(editedModel, selectedModel);
        editedModel = Model.omitChildrenProps(editedModel);
        editedModel.save();
        this.setState({displayDialog: false});
      } catch (exception) {
        console.warn(exception);
        alert(exception.message);
      }
      // this.updateState();
    }
  }

  onBtnCancel() {
    this.setState({displayDialog: false, selectedModel: undefined});
    // this.updateState();
  }

  btnEdit(model: Model) {
// debugger
    const edit = () => {
      // debugger
      // this.setState({displayDialog: true});
      console.log('show dialog relative to table: ', model);
      if (model.tableName() === 'users') {
        this.dialogUser.state.displayDialog = true;
      }
    }
    return (
      <Button onClick={_ => edit()} className="ui-button-info" icon="fa-edit" title="Edit"/>
    )
  }

  btnRemove(model: Model) {
    const remove = (model: Model) => {
      if (model.isSaved()) {
        model.remove();
        // this.updateState();
      }
    }
    return (
      <Button onClick={_ => remove(model)} className="ui-button-danger" icon="fa-trash" title="Delete"/>
    )
  }

  onRowClick(e: any) {
    // let users;
    // const {children} = this.state;
    // const selectedModel = e.data
    // const tableName = selectedModel.tableName();
    // if (tableName === 'users') {
    //   this.setState({
    //     jsonContent: users.getAll({children}),
    //     tableSelected: tableName.toUpperCase(),
    //   });
    // }
    // if (tableName === "posts") {
    //   this.setState({
    //     jsonContent: posts.getAll({children}),
    //     tableSelected: tableName.toUpperCase(),
    //   });
    // }
    // this.setState({selectedModel: selectedModel});
  }

  getSelectedTableCss(tableName: string): string {
    if (this.state.tableSelected === tableName.toUpperCase()) {
      return 'centered table-selected';
    } else {
      return 'centered';
    }
  }

  updateProperty(property: any, value: any) {
    let model = this.state.selectedModel;
    model[property] = value;
    this.setState({selectedModel: model});
  }

  // onIsAdminChange(value: any) {
  //   const selectedModel = this.state.selectedModel;
  //   selectedModel.admin = value;
  //   this.setState({selectedModel: selectedModel});
  // }





  render() {

    const {users} = this.props
    const {tableSelected, selectedModel, displayDialog} = this.state;
    const headerUserTable = 'USERS';
    const headerPostTable = 'POSTS';
    const footerUsersTable = (<div className="ui-helper-clearfix full-width">
      <Button className="float-left" icon="fa-plus" label="Add New"
              onClick={_ => this.add(new User({name: '', age: '', admin: 0}))}/>
    </div>);
    const footerPostsTable = (<div className="ui-helper-clearfix full-width">
      <Button className="float-left" icon="fa-plus" label="Add New"
              onClick={_ => this.add(new Post({title: '', content: ''}))}/>
    </div>);
    const isAdminOptions = [{label: 'True', value: 1}, {label: 'False', value: 0}];
    const props = {
      displayDialog: displayDialog,
      selectedModel: selectedModel,
      updateState: this.updateState,
      children: children
    };

    return (

      <div>


          <DataTable value={users} onRowClick={(e: any) => this.onRowClick(e)}
                     header={headerUserTable} footer={footerUsersTable}
                     className={this.getSelectedTableCss('users')}>
            <Column field="id" header="Id"/>
            <Column field="name" header="Name"/>
            <Column field="age" header="Age"/>
            <Column field="admin" header="Admin"/>
            <Column header="Edit" body={(model: Model) => this.btnEdit(model)}/>
            <Column header="Delete" body={(model: Model) => this.btnRemove(model)}/>
          </DataTable>


        <DialogUser ref={(el: DialogUser) => this.dialogUser = el} {...props}/>


        {/*<Dialog visible={this.state.displayDialog} header="Edit Row" modal={true}*/}
        {/*footer={footerDialog} onHide={() => this.setState({displayDialog: false})}>*/}
        {/*<div className="ui-grid ui-grid-responsive ui-fluid">*/}
        {/*<div className="ui-grid-row">*/}
        {/*<div className="ui-grid-col-4 dialog-label">*/}
        {/*<label htmlFor="name">Name</label>*/}
        {/*</div>*/}
        {/*<div className="ui-grid-col-8 dialog-label">*/}
        {/*<InputText id="name"*/}
        {/*onChange={(e: any) => {this.updateProperty('name', e.target.value)}}*/}
        {/*value={selectedModel ? selectedModel.name : ''}/>*/}
        {/*</div>*/}
        {/*</div>*/}
        {/*<div className="ui-grid-row">*/}
        {/*<div className="ui-grid-col-4 dialog-label">*/}
        {/*<label htmlFor="age">Age</label>*/}
        {/*</div>*/}
        {/*<div className="ui-grid-col-8 dialog-label">*/}
        {/*<InputText id="age"*/}
        {/*onChange={(e: any) => {this.updateProperty('age', e.target.value)}}*/}
        {/*value={selectedModel ? selectedModel.age : ''}/>*/}
        {/*</div>*/}
        {/*</div>*/}
        {/*<div className="ui-grid-row">*/}
        {/*<div className="ui-grid-col-4 dialog-label">*/}
        {/*<label htmlFor="admin">Admin</label>*/}
        {/*</div>*/}
        {/*<div className="dialog-label">*/}
        {/*<Dropdown value={selectedModel ? selectedModel.admin : ''}*/}
        {/*id="admin" dataKey="admin" options={isAdminOptions}*/}
        {/*onChange={(e: {originalEvent: Event, value: any}) => this.onIsAdminChange(e.value)}*/}
        {/*className="dropdown" placeholder="Is Admin?"/>*/}
        {/*</div>*/}
        {/*</div>*/}
        {/*</div>*/}
        {/*</Dialog>*/}

      </div>
    );
  }
}
