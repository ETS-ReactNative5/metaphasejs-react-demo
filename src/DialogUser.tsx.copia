import * as React from 'react';
import {Dialog} from "primereact/components/dialog/Dialog";
import {InputText} from "primereact/components/inputtext/InputText";
import {Dropdown} from "primereact/components/dropdown/Dropdown";
import {Button} from "primereact/components/button/Button";
import {Model} from "./orm/model";

interface Props {
  readonly selectedModel: Model,
  // readonly displayDialog: boolean
  readonly updateState: Function,
}

interface State {
  selectedModel: Model,
  displayDialog?: boolean,
  updateState?: Function,
}

export class DialogUser extends React.Component{

  state: State;

  props: Props;

  constructor(props: Props) {
    super(props)
    this.state = {
      selectedModel: props.selectedModel,
      // displayDialog: props.displayDialog,
    }
  }

  componentWillReceiveProps(props: Props) {
    this.setState({
      selectedModel: props.selectedModel,
      // displayDialog: props.displayDialog
    });
  }

  updateProperty(property: any, value: any) {
    let model = this.state.selectedModel;
    model[property] = value;
    this.setState({selectedModel: model});
  }

  onIsAdminChange(value: any) {
    const selectedModel = this.state.selectedModel;
    selectedModel.admin = value;
    this.setState({selectedModel: selectedModel});
  }

  onBtnCancel() {
    this.setState({displayDialog: false, selectedModel: undefined});
  }

  onBtnSave() {
    const {selectedModel} = this.props;
    if (selectedModel) {
      let editedModel = {...selectedModel};
      try {
        Object.setPrototypeOf(editedModel, selectedModel);
        editedModel = Model.omitChildrenProps(editedModel);
        editedModel.save();
        this.setState({displayDialog: false});
      } catch (exception) {
        console.warn(exception);
        alert(exception.message);
      }
    this.props.updateState();
    }
  }

  show() {
    this.setState({displayDialog: true});
  }

  render() {

    const {selectedModel, displayDialog} = this.state;
    const footerDialog = <div className="ui-dialog-buttonpane ui-helper-clearfix">
      <Button icon="fa-close" label="Cancel" onClick={_ => this.onBtnCancel()}/>
      <Button label="Save" icon="fa-check" onClick={_ => this.onBtnSave()}/>
    </div>;
    const isAdminOptions = [{label: 'True', value: 1}, {label: 'False', value: 0}];

    return (
      <Dialog visible={displayDialog} header="Edit Row" modal={true}
              footer={footerDialog} onHide={() => this.setState({displayDialog: false})}>
        <div className="ui-grid ui-grid-responsive ui-fluid">
          <div className="ui-grid-row">
            <div className="ui-grid-col-4 dialog-label">
              <label htmlFor="name">Name</label>
            </div>
            <div className="ui-grid-col-8 dialog-label">
              <InputText id="name"
                         onChange={(e: any) => {this.updateProperty('name', e.target.value)}}
                         value={selectedModel ? selectedModel.name : ''}/>
            </div>
          </div>
          <div className="ui-grid-row">
            <div className="ui-grid-col-4 dialog-label">
              <label htmlFor="age">Age</label>
            </div>
            <div className="ui-grid-col-8 dialog-label">
              <InputText id="age"
                         onChange={(e: any) => {this.updateProperty('age', e.target.value)}}
                         value={selectedModel ? selectedModel.age : ''}/>
            </div>
          </div>
          <div className="ui-grid-row">
            <div className="ui-grid-col-4 dialog-label">
              <label htmlFor="admin">Admin</label>
            </div>
            <div className="dialog-label">
              <Dropdown value={selectedModel ? selectedModel.admin : ''}
                        id="admin" dataKey="admin" options={isAdminOptions}
                        onChange={(e: {originalEvent: Event, value: any}) => this.onIsAdminChange(e.value)}
                        className="dropdown" placeholder="Is Admin?"/>
            </div>
          </div>
        </div>
      </Dialog>
    )
  }
}